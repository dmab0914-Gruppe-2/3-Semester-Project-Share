//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientApp.FileCtrService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FilePrepare", Namespace="http://schemas.datacontract.org/2004/07/Server")]
    [System.SerializableAttribute()]
    public partial class FilePrepare : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int serverportField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int serverport {
            get {
                return this.serverportField;
            }
            set {
                if ((this.serverportField.Equals(value) != true)) {
                    this.serverportField = value;
                    this.RaisePropertyChanged("serverport");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileCtrService.IFile")]
    public interface IFile {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFile/Prepare", ReplyAction="http://tempuri.org/IFile/PrepareResponse")]
        ClientApp.FileCtrService.FilePrepare Prepare(ClientApp.FileCtrService.FilePrepare Fpp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFile/Prepare", ReplyAction="http://tempuri.org/IFile/PrepareResponse")]
        System.Threading.Tasks.Task<ClientApp.FileCtrService.FilePrepare> PrepareAsync(ClientApp.FileCtrService.FilePrepare Fpp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFile/Upload", ReplyAction="http://tempuri.org/IFile/UploadResponse")]
        void Upload();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFile/Upload", ReplyAction="http://tempuri.org/IFile/UploadResponse")]
        System.Threading.Tasks.Task UploadAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileChannel : ClientApp.FileCtrService.IFile, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileClient : System.ServiceModel.ClientBase<ClientApp.FileCtrService.IFile>, ClientApp.FileCtrService.IFile {
        
        public FileClient() {
        }
        
        public FileClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ClientApp.FileCtrService.FilePrepare Prepare(ClientApp.FileCtrService.FilePrepare Fpp) {
            return base.Channel.Prepare(Fpp);
        }
        
        public System.Threading.Tasks.Task<ClientApp.FileCtrService.FilePrepare> PrepareAsync(ClientApp.FileCtrService.FilePrepare Fpp) {
            return base.Channel.PrepareAsync(Fpp);
        }
        
        public void Upload() {
            base.Channel.Upload();
        }
        
        public System.Threading.Tasks.Task UploadAsync() {
            return base.Channel.UploadAsync();
        }
    }
}
