//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientApp.ProjectService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProjectService.IProjectService")]
    public interface IProjectService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddProject", ReplyAction="http://tempuri.org/IProjectService/AddProjectResponse")]
        Library.ProjectReturnType AddProject(string title, string description, string projectFolder, Library.User projectAdministratorUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddProject", ReplyAction="http://tempuri.org/IProjectService/AddProjectResponse")]
        System.Threading.Tasks.Task<Library.ProjectReturnType> AddProjectAsync(string title, string description, string projectFolder, Library.User projectAdministratorUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAllProjects", ReplyAction="http://tempuri.org/IProjectService/GetAllProjectsResponse")]
        Library.Project[] GetAllProjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAllProjects", ReplyAction="http://tempuri.org/IProjectService/GetAllProjectsResponse")]
        System.Threading.Tasks.Task<Library.Project[]> GetAllProjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProject", ReplyAction="http://tempuri.org/IProjectService/GetProjectResponse")]
        Library.Project GetProject(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProject", ReplyAction="http://tempuri.org/IProjectService/GetProjectResponse")]
        System.Threading.Tasks.Task<Library.Project> GetProjectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/UpdateProject", ReplyAction="http://tempuri.org/IProjectService/UpdateProjectResponse")]
        int UpdateProject(int id, string title, string description, string projectFolder, Library.User[] ProjectMembers, Library.User[] projectAdministrators);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/UpdateProject", ReplyAction="http://tempuri.org/IProjectService/UpdateProjectResponse")]
        System.Threading.Tasks.Task<int> UpdateProjectAsync(int id, string title, string description, string projectFolder, Library.User[] ProjectMembers, Library.User[] projectAdministrators);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/DeleteProject", ReplyAction="http://tempuri.org/IProjectService/DeleteProjectResponse")]
        int DeleteProject(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/DeleteProject", ReplyAction="http://tempuri.org/IProjectService/DeleteProjectResponse")]
        System.Threading.Tasks.Task<int> DeleteProjectAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProjectServiceChannel : ClientApp.ProjectService.IProjectService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProjectServiceClient : System.ServiceModel.ClientBase<ClientApp.ProjectService.IProjectService>, ClientApp.ProjectService.IProjectService {
        
        public ProjectServiceClient() {
        }
        
        public ProjectServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProjectServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Library.ProjectReturnType AddProject(string title, string description, string projectFolder, Library.User projectAdministratorUser) {
            return base.Channel.AddProject(title, description, projectFolder, projectAdministratorUser);
        }
        
        public System.Threading.Tasks.Task<Library.ProjectReturnType> AddProjectAsync(string title, string description, string projectFolder, Library.User projectAdministratorUser) {
            return base.Channel.AddProjectAsync(title, description, projectFolder, projectAdministratorUser);
        }
        
        public Library.Project[] GetAllProjects() {
            return base.Channel.GetAllProjects();
        }
        
        public System.Threading.Tasks.Task<Library.Project[]> GetAllProjectsAsync() {
            return base.Channel.GetAllProjectsAsync();
        }
        
        public Library.Project GetProject(int id) {
            return base.Channel.GetProject(id);
        }
        
        public System.Threading.Tasks.Task<Library.Project> GetProjectAsync(int id) {
            return base.Channel.GetProjectAsync(id);
        }
        
        public int UpdateProject(int id, string title, string description, string projectFolder, Library.User[] ProjectMembers, Library.User[] projectAdministrators) {
            return base.Channel.UpdateProject(id, title, description, projectFolder, ProjectMembers, projectAdministrators);
        }
        
        public System.Threading.Tasks.Task<int> UpdateProjectAsync(int id, string title, string description, string projectFolder, Library.User[] ProjectMembers, Library.User[] projectAdministrators) {
            return base.Channel.UpdateProjectAsync(id, title, description, projectFolder, ProjectMembers, projectAdministrators);
        }
        
        public int DeleteProject(int id) {
            return base.Channel.DeleteProject(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteProjectAsync(int id) {
            return base.Channel.DeleteProjectAsync(id);
        }
    }
}
