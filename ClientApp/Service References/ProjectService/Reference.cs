//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientApp.ProjectService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProjectService.IProjectService")]
    public interface IProjectService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddProject", ReplyAction="http://tempuri.org/IProjectService/AddProjectResponse")]
        Library.ProjectReturnType AddProject(string title, string description, string projectFolder, Library.User projectAdministratorUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddProject", ReplyAction="http://tempuri.org/IProjectService/AddProjectResponse")]
        System.Threading.Tasks.Task<Library.ProjectReturnType> AddProjectAsync(string title, string description, string projectFolder, Library.User projectAdministratorUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAllProjects", ReplyAction="http://tempuri.org/IProjectService/GetAllProjectsResponse")]
        Library.Project[] GetAllProjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetAllProjects", ReplyAction="http://tempuri.org/IProjectService/GetAllProjectsResponse")]
        System.Threading.Tasks.Task<Library.Project[]> GetAllProjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetSomeProjects", ReplyAction="http://tempuri.org/IProjectService/GetSomeProjectsResponse")]
        Library.Project[] GetSomeProjects(System.Func<Library.Project, bool> func);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetSomeProjects", ReplyAction="http://tempuri.org/IProjectService/GetSomeProjectsResponse")]
        System.Threading.Tasks.Task<Library.Project[]> GetSomeProjectsAsync(System.Func<Library.Project, bool> func);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProject", ReplyAction="http://tempuri.org/IProjectService/GetProjectResponse")]
        Library.Project GetProject(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProject", ReplyAction="http://tempuri.org/IProjectService/GetProjectResponse")]
        System.Threading.Tasks.Task<Library.Project> GetProjectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/UpdateProject", ReplyAction="http://tempuri.org/IProjectService/UpdateProjectResponse")]
        bool UpdateProject(int id, string title, string description, string projectFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/UpdateProject", ReplyAction="http://tempuri.org/IProjectService/UpdateProjectResponse")]
        System.Threading.Tasks.Task<bool> UpdateProjectAsync(int id, string title, string description, string projectFolder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/DeleteProject", ReplyAction="http://tempuri.org/IProjectService/DeleteProjectResponse")]
        bool DeleteProject(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/DeleteProject", ReplyAction="http://tempuri.org/IProjectService/DeleteProjectResponse")]
        System.Threading.Tasks.Task<bool> DeleteProjectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddUserToProject", ReplyAction="http://tempuri.org/IProjectService/AddUserToProjectResponse")]
        bool AddUserToProject(int projectId, Library.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddUserToProject", ReplyAction="http://tempuri.org/IProjectService/AddUserToProjectResponse")]
        System.Threading.Tasks.Task<bool> AddUserToProjectAsync(int projectId, Library.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveUserFromProject", ReplyAction="http://tempuri.org/IProjectService/RemoveUserFromProjectResponse")]
        bool RemoveUserFromProject(int projectId, Library.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveUserFromProject", ReplyAction="http://tempuri.org/IProjectService/RemoveUserFromProjectResponse")]
        System.Threading.Tasks.Task<bool> RemoveUserFromProjectAsync(int projectId, Library.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddProjectAdministratorToProject", ReplyAction="http://tempuri.org/IProjectService/AddProjectAdministratorToProjectResponse")]
        bool AddProjectAdministratorToProject(int projectId, Library.User projectAdministrator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/AddProjectAdministratorToProject", ReplyAction="http://tempuri.org/IProjectService/AddProjectAdministratorToProjectResponse")]
        System.Threading.Tasks.Task<bool> AddProjectAdministratorToProjectAsync(int projectId, Library.User projectAdministrator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveProjectAdministratorFromProject", ReplyAction="http://tempuri.org/IProjectService/RemoveProjectAdministratorFromProjectResponse")]
        bool RemoveProjectAdministratorFromProject(int projectId, Library.User projectAdministrator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/RemoveProjectAdministratorFromProject", ReplyAction="http://tempuri.org/IProjectService/RemoveProjectAdministratorFromProjectResponse")]
        System.Threading.Tasks.Task<bool> RemoveProjectAdministratorFromProjectAsync(int projectId, Library.User projectAdministrator);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProjectServiceChannel : ClientApp.ProjectService.IProjectService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProjectServiceClient : System.ServiceModel.ClientBase<ClientApp.ProjectService.IProjectService>, ClientApp.ProjectService.IProjectService {
        
        public ProjectServiceClient() {
        }
        
        public ProjectServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProjectServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Library.ProjectReturnType AddProject(string title, string description, string projectFolder, Library.User projectAdministratorUser) {
            return base.Channel.AddProject(title, description, projectFolder, projectAdministratorUser);
        }
        
        public System.Threading.Tasks.Task<Library.ProjectReturnType> AddProjectAsync(string title, string description, string projectFolder, Library.User projectAdministratorUser) {
            return base.Channel.AddProjectAsync(title, description, projectFolder, projectAdministratorUser);
        }
        
        public Library.Project[] GetAllProjects() {
            return base.Channel.GetAllProjects();
        }
        
        public System.Threading.Tasks.Task<Library.Project[]> GetAllProjectsAsync() {
            return base.Channel.GetAllProjectsAsync();
        }
        
        public Library.Project[] GetSomeProjects(System.Func<Library.Project, bool> func) {
            return base.Channel.GetSomeProjects(func);
        }
        
        public System.Threading.Tasks.Task<Library.Project[]> GetSomeProjectsAsync(System.Func<Library.Project, bool> func) {
            return base.Channel.GetSomeProjectsAsync(func);
        }
        
        public Library.Project GetProject(int id) {
            return base.Channel.GetProject(id);
        }
        
        public System.Threading.Tasks.Task<Library.Project> GetProjectAsync(int id) {
            return base.Channel.GetProjectAsync(id);
        }
        
        public bool UpdateProject(int id, string title, string description, string projectFolder) {
            return base.Channel.UpdateProject(id, title, description, projectFolder);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateProjectAsync(int id, string title, string description, string projectFolder) {
            return base.Channel.UpdateProjectAsync(id, title, description, projectFolder);
        }
        
        public bool DeleteProject(int id) {
            return base.Channel.DeleteProject(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteProjectAsync(int id) {
            return base.Channel.DeleteProjectAsync(id);
        }
        
        public bool AddUserToProject(int projectId, Library.User user) {
            return base.Channel.AddUserToProject(projectId, user);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserToProjectAsync(int projectId, Library.User user) {
            return base.Channel.AddUserToProjectAsync(projectId, user);
        }
        
        public bool RemoveUserFromProject(int projectId, Library.User user) {
            return base.Channel.RemoveUserFromProject(projectId, user);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserFromProjectAsync(int projectId, Library.User user) {
            return base.Channel.RemoveUserFromProjectAsync(projectId, user);
        }
        
        public bool AddProjectAdministratorToProject(int projectId, Library.User projectAdministrator) {
            return base.Channel.AddProjectAdministratorToProject(projectId, projectAdministrator);
        }
        
        public System.Threading.Tasks.Task<bool> AddProjectAdministratorToProjectAsync(int projectId, Library.User projectAdministrator) {
            return base.Channel.AddProjectAdministratorToProjectAsync(projectId, projectAdministrator);
        }
        
        public bool RemoveProjectAdministratorFromProject(int projectId, Library.User projectAdministrator) {
            return base.Channel.RemoveProjectAdministratorFromProject(projectId, projectAdministrator);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveProjectAdministratorFromProjectAsync(int projectId, Library.User projectAdministrator) {
            return base.Channel.RemoveProjectAdministratorFromProjectAsync(projectId, projectAdministrator);
        }
    }
}
